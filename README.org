#-*- coding: utf-8 -*-

* 概要
  mikutterで投稿する際に，@shellや@shell_pに向けたポストを
  シェルコマンドとして解釈し，実行します．
  コマンドの実行結果がシステムメッセージとして自分のタイムラインに流れてきます．

* リプライ先
** @system
   mikutterコンソールに入力するのと同じです．
   エラー等があった場合は，その旨をシステムメッセージとして表示します．

** @shell
   ここに向けたリプライは10秒でtimeoutします．
   pingとか叩いた場合でも自動で終了するので安心です．

** @shell_p
   pはpersistのpです．ここに向けたコマンドはtimeoutしません．
   シェルを立ち上げたりするときに便利です．

** @shell_rb
   Rubyで実行します．

** @shell_py
   Pythonで実行します．

** @shell_pl
   Perlで実行します．

** @shell_c
   Cのソースとして解釈し，コンパイルしてから実行します．

** @shell_cpp
   C++のソースとして解釈し，コンパイルしてから実行します．

** @script program options...
   入力されたソースをファイルに書き，指定したprogramを用いて実行します．
   optionsを指定することもできます．

** @compile [srcfilename] [exec command] compiler options...
   入力されたソースをファイルに書き，指定したcompilerを用いて実行します．
   optionsを指定できます．
   コンパイル後はexec commandを実行します．

* 式展開機能
  投稿する際に#{}によってRubyの式を記述することができます．
  たとえば，「2 ** 10 = #{print 2 ** 10}」と入力してCtrl-Enterすれば，
  式が展開され，投稿ボックスの内容が「2 ** 10 = 1024」に変わります．
  内部的には ruby -e を呼んでいるだけなので，print等で出力された部分が置き換わります．

* 使用例
  - @shell uptime
  - @shell_p gnome_terminal
  - @shell_rb 10.times { |x| puts x }
  - @shell_py print "10 * 20 = %d" % (10 * 20)
  - @shell_pl print 3 * 9 * 3 * 9

* FAQ
  @shellや@shell_pに向けてリプライを飛ばしたい．
  => 右側の投稿ボタンを押せばリプライとして投稿できます．
